/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AppWorkflowIndexRouteImport } from './routes/_app/workflow/index'
import { Route as AppTask_groupIndexRouteImport } from './routes/_app/task_group/index'
import { Route as AppSimIndexRouteImport } from './routes/_app/sim/index'
import { Route as AppDashboardIndexRouteImport } from './routes/_app/dashboard/index'
import { Route as AppTask_groupTaskGroupIdIndexRouteImport } from './routes/_app/task_group/$taskGroupId/index'
import { Route as AppSimSimIdIndexRouteImport } from './routes/_app/sim/$simId/index'

const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppWorkflowIndexRoute = AppWorkflowIndexRouteImport.update({
  id: '/workflow/',
  path: '/workflow/',
  getParentRoute: () => AppRoute,
} as any)
const AppTask_groupIndexRoute = AppTask_groupIndexRouteImport.update({
  id: '/task_group/',
  path: '/task_group/',
  getParentRoute: () => AppRoute,
} as any)
const AppSimIndexRoute = AppSimIndexRouteImport.update({
  id: '/sim/',
  path: '/sim/',
  getParentRoute: () => AppRoute,
} as any)
const AppDashboardIndexRoute = AppDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => AppRoute,
} as any)
const AppTask_groupTaskGroupIdIndexRoute =
  AppTask_groupTaskGroupIdIndexRouteImport.update({
    id: '/task_group/$taskGroupId/',
    path: '/task_group/$taskGroupId/',
    getParentRoute: () => AppRoute,
  } as any)
const AppSimSimIdIndexRoute = AppSimSimIdIndexRouteImport.update({
  id: '/sim/$simId/',
  path: '/sim/$simId/',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof AppIndexRoute
  '/dashboard': typeof AppDashboardIndexRoute
  '/sim': typeof AppSimIndexRoute
  '/task_group': typeof AppTask_groupIndexRoute
  '/workflow': typeof AppWorkflowIndexRoute
  '/sim/$simId': typeof AppSimSimIdIndexRoute
  '/task_group/$taskGroupId': typeof AppTask_groupTaskGroupIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof AppIndexRoute
  '/dashboard': typeof AppDashboardIndexRoute
  '/sim': typeof AppSimIndexRoute
  '/task_group': typeof AppTask_groupIndexRoute
  '/workflow': typeof AppWorkflowIndexRoute
  '/sim/$simId': typeof AppSimSimIdIndexRoute
  '/task_group/$taskGroupId': typeof AppTask_groupTaskGroupIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/_app/': typeof AppIndexRoute
  '/_app/dashboard/': typeof AppDashboardIndexRoute
  '/_app/sim/': typeof AppSimIndexRoute
  '/_app/task_group/': typeof AppTask_groupIndexRoute
  '/_app/workflow/': typeof AppWorkflowIndexRoute
  '/_app/sim/$simId/': typeof AppSimSimIdIndexRoute
  '/_app/task_group/$taskGroupId/': typeof AppTask_groupTaskGroupIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/sim'
    | '/task_group'
    | '/workflow'
    | '/sim/$simId'
    | '/task_group/$taskGroupId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/sim'
    | '/task_group'
    | '/workflow'
    | '/sim/$simId'
    | '/task_group/$taskGroupId'
  id:
    | '__root__'
    | '/_app'
    | '/_app/'
    | '/_app/dashboard/'
    | '/_app/sim/'
    | '/_app/task_group/'
    | '/_app/workflow/'
    | '/_app/sim/$simId/'
    | '/_app/task_group/$taskGroupId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/workflow/': {
      id: '/_app/workflow/'
      path: '/workflow'
      fullPath: '/workflow'
      preLoaderRoute: typeof AppWorkflowIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/task_group/': {
      id: '/_app/task_group/'
      path: '/task_group'
      fullPath: '/task_group'
      preLoaderRoute: typeof AppTask_groupIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/sim/': {
      id: '/_app/sim/'
      path: '/sim'
      fullPath: '/sim'
      preLoaderRoute: typeof AppSimIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/dashboard/': {
      id: '/_app/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/task_group/$taskGroupId/': {
      id: '/_app/task_group/$taskGroupId/'
      path: '/task_group/$taskGroupId'
      fullPath: '/task_group/$taskGroupId'
      preLoaderRoute: typeof AppTask_groupTaskGroupIdIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/sim/$simId/': {
      id: '/_app/sim/$simId/'
      path: '/sim/$simId'
      fullPath: '/sim/$simId'
      preLoaderRoute: typeof AppSimSimIdIndexRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppDashboardIndexRoute: typeof AppDashboardIndexRoute
  AppSimIndexRoute: typeof AppSimIndexRoute
  AppTask_groupIndexRoute: typeof AppTask_groupIndexRoute
  AppWorkflowIndexRoute: typeof AppWorkflowIndexRoute
  AppSimSimIdIndexRoute: typeof AppSimSimIdIndexRoute
  AppTask_groupTaskGroupIdIndexRoute: typeof AppTask_groupTaskGroupIdIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppDashboardIndexRoute: AppDashboardIndexRoute,
  AppSimIndexRoute: AppSimIndexRoute,
  AppTask_groupIndexRoute: AppTask_groupIndexRoute,
  AppWorkflowIndexRoute: AppWorkflowIndexRoute,
  AppSimSimIdIndexRoute: AppSimSimIdIndexRoute,
  AppTask_groupTaskGroupIdIndexRoute: AppTask_groupTaskGroupIdIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
